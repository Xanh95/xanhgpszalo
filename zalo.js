import { Zalo, ThreadType } from "zca-js";
import { run_vietmap } from "./vietmap.js";
import { run_binhanh } from "./binhanh.js";
import path from "path";
import { Builder, By, Key, until } from "selenium-webdriver";
import firefox from "selenium-webdriver/firefox.js";
import fs from "node:fs/promises";

// bi·∫øn
const WARN_FILE = path.resolve("./warn_records.json");
const vietmap = {
  "29LD31538": "210002",
  "29H95648": "180285",
  "29LD31356": "212968",
  "29LD31377": "231347",
};

// Object ch·ª©a th√¥ng tin bi·ªÉn s·ªë t·ª´ danh_sach_xe.json
const binhanh = {
  "29H76446": "487452",
  "29H76366": "485798",
  "29H76494": "487423",
  "29LD31574": "476945",
  "29H76466": "489205",
  "29E15073": "633109",
};
const zalo_id = {
  "29ld31538": "2370540463748680495",
  "29h95648": "2015333738208895549",
  "29ld31356": "1802702973168669646",
  "29ld31377": "1907412626625801394",
  "29h76446": "1244389568543071118",
  "29h76366": "3061263053099966385",
  "29h76494": "7160192846130148244",
  "29ld31574": "1086903675994133727",
  "29e38191": "3709510548480395184",
  "29h76466": "8687757462246139739",
  "29e15073": "2846795138633328715",
};
// const zalo_id = {
//   "29LD31538": "8742505709139289241",
//   "29H95648": "8742505709139289241",
//   "29LD31356": "8742505709139289241",
//   "29LD31377": "8742505709139289241",
//   "29H76446": "8742505709139289241",
//   "29H76366": "8742505709139289241",
//   "29H76494": "8742505709139289241",
//   "29LD31574": "8742505709139289241",
//   "29E38191": "8742505709139289241",
//   "29H76466": "8742505709139289241",
//   "29E15073": "8742505709139289241",
// };
//  h√†m l·∫•y ng√†y trong tu·∫ßn
function getWeekNumber(date) {
  // Clone date ƒë·ªÉ tr√°nh thay ƒë·ªïi object g·ªëc
  const d = new Date(
    Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())
  );
  // L·∫•y th·ª© trong tu·∫ßn (0=CN, 1=Th·ª© 2,...), chu·∫©n ISO b·∫Øt ƒë·∫ßu t·ª´ Th·ª© 2
  const dayNum = d.getUTCDay() || 7;
  d.setUTCDate(d.getUTCDate() + 4 - dayNum);
  const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
  const weekNo = Math.ceil(((d - yearStart) / 86400000 + 1) / 7);
  return weekNo;
}
// h√†m l∆∞u c·∫£nh b√°o
async function loadWarningRecords() {
  try {
    const data = await fs.readFile(WARN_FILE, "utf8");
    return JSON.parse(data);
  } catch {
    return {}; // n·∫øu file ch∆∞a t·ªìn t·∫°i, tr·∫£ v·ªÅ object r·ªóng
  }
}

async function saveWarningRecords(records) {
  await fs.writeFile(WARN_FILE, JSON.stringify(records, null, 2));
}

async function saveWarningRecord(plate, type) {
  const records = await loadWarningRecords();
  const now = Date.now();

  if (!Array.isArray(records[plate])) {
    records[plate] = [{ time: now, type }];
  } else {
    const arr = records[plate];
    const last = arr[arr.length - 1];
    if (last.type === type) {
      last.time = now; // ghi ƒë√® th·ªùi gian
    } else {
      arr.push({ time: now, type }); // th√™m m·ªõi
    }
  }

  // ‚ö° L∆ØU L·∫†I RA FILE
  await saveWarningRecords(records);
}
// h√†m g·ª≠i tin nh·∫Øn
async function sendTextToUser(api, uid, text) {
  await api.sendMessage(text, uid, ThreadType.User);
  console.log("ƒê√£ g·ª≠i cho UID:", uid);
}
// h√†m format th·ªùi gian
function formatTimeFromSeconds(seconds) {
  if (seconds == null) return "N/A";
  let h = Math.floor(seconds / 3600);
  let m = Math.floor((seconds % 3600) / 60);
  let s = seconds % 60;
  return `${h} Gi·ªù ${m} Ph√∫t ${s} Gi√¢y`;
}
// üëâ H√†m ki·ªÉm tra th·ªùi gian vietmap
async function check_time_vietmap(api) {
  // C·∫•u h√¨nh Firefox
  let options = new firefox.Options();
  options.addArguments("--headless"); // B·ªè comment n·∫øu mu·ªën ch·∫°y ·∫©n

  let driver = await new Builder()
    .forBrowser("firefox")
    .setFirefoxOptions(options)
    .build();

  try {
    // Ch·ªânh c·ª≠a s·ªï 1920x1080
    // await driver.manage().window().setRect({ width: 1920, height: 1080 });

    // M·ªü trang web
    await driver.get("https://quanlyxe.vn/");

    // Ch·ªù t·ªëi ƒëa 10 gi√¢y cho √¥ nh·∫≠p UserName
    let searchUsername = await driver.wait(
      until.elementLocated(By.name("UserName")),
      10000
    );
    console.log("ƒê√£ t√¨m th·∫•y √¥ UserName!");

    let inpPas = await driver.findElement(By.name("Password"));
    let inpLogin = await driver.findElement(By.name("login"));

    await searchUsername.sendKeys("hoaphat");
    await inpPas.sendKeys("hpl2021");
    await driver.sleep(500); // time.sleep(0.5)
    await inpLogin.click();

    // Login xong r·ªìi th√¨ ch·ªù trang load ho√†n t·∫•t
    await driver.wait(async () => {
      let state = await driver.executeScript("return document.readyState");
      return state === "complete";
    }, 10000);
    // v√≤ng l·∫∑p ki·ªÉm tra t·ª´ng xe viet map

    for (let [plate, carId] of Object.entries(vietmap)) {
      try {
        // L·∫•y th√¥ng tin status. Ch·ªù ƒë·∫øn khi window.statuses["vec_xxx"] c√≥ gi√° tr·ªã
        let value = await driver.wait(async () => {
          return await driver.executeScript(
            `return window.statuses && window.statuses["vec_${carId}"] !== undefined 
                ? window.statuses["vec_${carId}"] 
                : null;`
          );
        }, 10000);

        if (!value) {
          console.log(`‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu cho xe ${plate}`);
          continue;
        }

        let continuous = value[16];
        let daily = value[17];
        let weekly = value[69];
        // continuous = 12600; // Gi·∫£ s·ª≠ gi√° tr·ªã n√†y l√† 12600 gi√¢y (3.5 gi·ªù)
        // daily = 28800; // Gi·∫£ s·ª≠ gi√° tr·ªã n√†y l√† 28800 gi√¢y (8 gi·ªù)
        // weekly = 165600; // Gi·∫£ s·ª≠ gi√° tr·ªã n√†y l√† 165600 gi√¢y (46 gi·ªù)

        console.log(`\nüìå Xe ${plate}:`);
        console.log(" - L√°i li√™n t·ª•c:", formatTimeFromSeconds(continuous));
        console.log(" - L√°i trong ng√†y:", formatTimeFromSeconds(daily));
        console.log(" - L√°i trong tu·∫ßn:", formatTimeFromSeconds(weekly));

        //  Ki·ªÉm tra qu√° gi·ªõi h·∫°n ontinuous > 14400 || daily > 36000 || weekly > 172800
        // C·∫£nh b√°o n·∫øu l√°i li√™n t·ª•c qu√° 4 gi·ªù
        if (continuous > 14400) {
          const records = await loadWarningRecords();
          const arr = records[plate];
          if (Array.isArray(arr)) {
            const existing = arr.find(
              (kieu_vi_pham) => kieu_vi_pham.type === "over_4h"
            );
            if (
              existing !== undefined &&
              Date.now() - existing.time <= 14400 * 1000
            ) {
              console.log("ƒê√£ c·∫£nh b√°o type 'over_4h' tr∆∞·ªõc ƒë√≥ t·∫°i:");
            } else {
              console.log("Ch∆∞a t·ª´ng c·∫£nh b√°o 'over_4h' cho xe n√†y.");
              await saveWarningRecord(plate, "over_4h");
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Xe ${plate} ƒë√£ l√°i li√™n t·ª•c qu√° 4 gi·ªù!`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin " th√¥ng tin xe ${plate}"`
              );
              console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'over_4h' cho xe:", plate);
            }
          } else {
            console.log("Ch∆∞a c√≥ record n√†o cho bi·ªÉn s·ªë n√†y.");
            await saveWarningRecord(plate, "over_4h");
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Xe ${plate} ƒë√£ l√°i li√™n t·ª•c qu√° 4 gi·ªù!`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin " th√¥ng tin xe ${plate}"`
            );
            console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'over_4h' cho xe:", plate);
          }
        }
        // C·∫£nh b√°o n·∫øu l√°i trong ng√†y qu√° 10 gi·ªù
        if (daily > 36000) {
          // 10h = 36000 gi√¢y
          const records = await loadWarningRecords();
          const arr = records[plate];

          if (Array.isArray(arr)) {
            const existing = arr.find(
              (kieu_vi_pham) => kieu_vi_pham.type === "over_10h"
            );

            if (
              existing !== undefined &&
              new Date(existing.time).toDateString() ===
                new Date().toDateString()
            ) {
              // ƒê√£ c·∫£nh b√°o trong c√πng 1 ng√†y
              console.log(
                "ƒê√£ c·∫£nh b√°o type 'over_10h' cho xe n√†y h√¥m nay t·∫°i:",
                new Date(existing.time).toLocaleString()
              );
            } else {
              // Ch∆∞a c√≥ ho·∫∑c kh√°c ng√†y -> c·∫£nh b√°o m·ªõi
              console.log("Ch∆∞a t·ª´ng c·∫£nh b√°o 'over_10h' cho xe n√†y h√¥m nay.");
              await saveWarningRecord(plate, "over_10h");
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Xe ${plate} ƒë√£ l√°i trong ng√†y qu√° 10 gi·ªù!`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
              );
              console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'over_10h' cho xe:", plate);
            }
          } else {
            // Ch∆∞a c√≥ record n√†o
            console.log("Ch∆∞a c√≥ record n√†o cho bi·ªÉn s·ªë n√†y.");
            await saveWarningRecord(plate, "over_10h");
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Xe ${plate} ƒë√£ l√°i trong ng√†y qu√° 10 gi·ªù!`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `c√≥ th·ªÉ xem th√¥ng tin th·ªùi l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
            );
            console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'over_10h' cho xe:", plate);
          }
        }
        // C·∫£nh b√°o n·∫øu l√°i trong tu·∫ßn qu√° 48 gi·ªù
        if (weekly > 172800) {
          // 172800 gi√¢y = 48h
          const records = await loadWarningRecords();
          const arr = records[plate];
          const thisWeek = getWeekNumber(new Date());
          const thisYear = new Date().getFullYear();

          if (Array.isArray(arr)) {
            const existing = arr.find((r) => r.type === "over_48h_week");
            if (
              existing !== undefined &&
              getWeekNumber(new Date(existing.time)) === thisWeek &&
              new Date(existing.time).getFullYear() === thisYear
            ) {
              console.log(
                `ƒê√£ c·∫£nh b√°o 'over_48h_week' trong tu·∫ßn ${thisWeek} r·ªìi.`
              );
            } else {
              console.log(
                `Ch∆∞a c·∫£nh b√°o 'over_48h_week' trong tu·∫ßn ${thisWeek}.`
              );
              await saveWarningRecord(plate, "over_48h_week");
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Xe ${plate} ƒë√£ l√°i xe qu√° 48 gi·ªù trong tu·∫ßn!`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
              );
              console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'over_48h_week' cho xe:", plate);
            }
          } else {
            console.log("Ch∆∞a c√≥ record n√†o cho bi·ªÉn s·ªë n√†y.");
            await saveWarningRecord(plate, "over_48h_week");
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Xe ${plate} ƒë√£ l√°i xe qu√° 48 gi·ªù trong tu·∫ßn!`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
            );
            console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'over_48h_week' cho xe:", plate);
          }
        }
        // 46h = 165600 gi√¢y, 48h = 172800 gi√¢y
        if (weekly >= 165600 && weekly < 172800) {
          const records = await loadWarningRecords();
          const arr = records[plate];
          const thisWeek = getWeekNumber(new Date());
          const thisYear = new Date().getFullYear();

          if (Array.isArray(arr)) {
            const existing = arr.find((r) => r.type === "near_48h_week");
            if (
              existing !== undefined &&
              getWeekNumber(new Date(existing.time)) === thisWeek &&
              new Date(existing.time).getFullYear() === thisYear
            ) {
              console.log(
                `ƒê√£ c·∫£nh b√°o 'near_48h_week' trong tu·∫ßn ${thisWeek} r·ªìi.`
              );
            } else {
              console.log(
                `Ch∆∞a c·∫£nh b√°o 'near_48h_week' trong tu·∫ßn ${thisWeek}.`
              );
              await saveWarningRecord(plate, "near_48h_week");
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Xe ${plate} ƒë√£ l√°i xe g·∫ßn 48 gi·ªù (‚â•46h v√† <48h) trong tu·∫ßn!`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
              );
              console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'near_48h_week' cho xe:", plate);
            }
          } else {
            console.log("Ch∆∞a c√≥ record n√†o cho bi·ªÉn s·ªë n√†y.");
            await saveWarningRecord(plate, "near_48h_week");
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Xe ${plate} ƒë√£ l√°i xe g·∫ßn 48 gi·ªù (‚â•46h v√† <48h) trong tu·∫ßn!`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
            );
            console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'near_48h_week' cho xe:", plate);
          }
        }

        // G·∫ßn 4h li√™n t·ª•c (>= 3h = 10800)
        if (continuous >= 12600 && continuous < 14400) {
          const records = await loadWarningRecords();
          const arr = records[plate];
          if (Array.isArray(arr)) {
            const existing = arr.find((r) => r.type === "near_4h");
            if (
              existing !== undefined &&
              Date.now() - existing.time <= 14400 * 1000
            ) {
              console.log(
                "ƒê√£ c·∫£nh b√°o 'near_4h' cho xe n√†y trong v√≤ng 4 ti·∫øng."
              );
            } else {
              console.log("Ch∆∞a c·∫£nh b√°o 'near_4h' trong v√≤ng 4 ti·∫øng.");
              await saveWarningRecord(plate, "near_4h");
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Xe ${plate} ƒë√£ l√°i xe 3 ti·∫øng g·∫ßn 4h li√™n t·ª•c!`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
              );
            }
          } else {
            await saveWarningRecord(plate, "near_4h");
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Xe ${plate} ƒë√£ l√°i xe 3 ti·∫øng g·∫ßn 4h li√™n t·ª•c!`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
            );
          }
        }
        // G·∫ßn 10h trong ng√†y (>= 8h = 28800s, < 10h = 36000s)
        if (daily >= 28800 && daily < 36000) {
          const records = await loadWarningRecords();
          const arr = records[plate];
          if (Array.isArray(arr)) {
            const existing = arr.find((r) => r.type === "near_10h");
            if (
              existing &&
              new Date(existing.time).toDateString() ===
                new Date().toDateString()
            ) {
              console.log("ƒê√£ c·∫£nh b√°o 'near_10h' cho xe n√†y h√¥m nay.");
            } else {
              console.log("Ch∆∞a c·∫£nh b√°o 'near_10h' h√¥m nay ‚Üí g·ª≠i c·∫£nh b√°o.");
              await saveWarningRecord(plate, "near_10h");
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Xe ${plate} ƒë√£ l√°i xe 8 ti·∫øng g·∫ßn 10h trong ng√†y!`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
              );
            }
          } else {
            await saveWarningRecord(plate, "near_10h");
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Xe ${plate} ƒë√£ l√°i xe 8 ti·∫øng  g·∫ßn 10h trong ng√†y!`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
            );
          }
        }
      } catch (err) {
        // console.error(`L·ªói khi ki·ªÉm tra xe ${plate}:`, err.message);
      }
    }
  } catch (err) {
    console.error("‚ùå L·ªói:", err);
  } finally {
    // ‚úÖ lu√¥n ƒë√≥ng Firefox khi xong
    await driver.quit();
  }
}

// üëâ H√†m ki·ªÉm tra th·ªùi gian binh anh
async function check_time_binhanh(api) {
  // C·∫•u h√¨nh Firefox
  let options = new firefox.Options();
  options.addArguments("--headless"); // B·ªè comment n·∫øu mu·ªën ch·∫°y ·∫©n

  let driver = await new Builder()
    .forBrowser("firefox")
    .setFirefoxOptions(options)
    .build();

  try {
    // Ch·ªânh c·ª≠a s·ªï 1920x1080
    // await driver.manage().window().setRect({ width: 1920, height: 1080 });

    // M·ªü trang web
    await driver.get("https://gps.binhanh.vn/Default.aspx");

    // Ch·ªù t·ªëi ƒëa 10 gi√¢y cho √¥ nh·∫≠p UserName
    let searchUsername = await driver.wait(
      until.elementLocated(By.name("UserLogin1$txtLoginUserName")),
      10000
    );
    console.log("ƒê√£ t√¨m th·∫•y √¥ UserName!");

    let inpPas = await driver.findElement(
      By.name("UserLogin1$txtLoginPassword")
    );
    let inpLogin = await driver.findElement(By.name("UserLogin1$btnLogin"));

    await searchUsername.sendKeys("tvhoaphat");
    await inpPas.sendKeys("12341234");
    await driver.sleep(500);
    await inpLogin.click();

    console.log("‚úÖ ƒê√£ ƒëƒÉng nh·∫≠p, ƒëang ch·ªù trang load xong...");

    // Ch·ªù trang load ho√†n t·∫•t sau khi ƒëƒÉng nh·∫≠p
    await driver.wait(async () => {
      let state = await driver.executeScript("return document.readyState");
      return state === "complete";
    }, 10000);

    console.log("‚úÖ Trang ƒë√£ load xong, ti·∫øp t·ª•c...");
    await driver.sleep(4000);
    // ƒê·ª£i th√™m ƒë·ªÉ popup load ho√†n to√†n
    await driver.sleep(2000);
    // Ki·ªÉm tra xem element c√≥ t·ªìn t·∫°i tr∆∞·ªõc khi click
    let closeBtn;
    try {
      closeBtn = await driver.wait(
        until.elementLocated(
          By.css("a.layui-layer-ico.layui-layer-close.layui-layer-close1")
        ),
        15000
      );

      // N·∫øu t√¨m th·∫•y element, th·ª±c hi·ªán click
      if (closeBtn) {
        await driver.executeScript(
          "document.querySelector('a.layui-layer-ico.layui-layer-close.layui-layer-close1').click();"
        );
        console.log("‚úÖ ƒê√£ click n√∫t ƒë√≥ng popup");
      }
    } catch (err) {
      console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t ƒë√≥ng popup, b·ªè qua b∆∞·ªõc n√†y.");
    }
    // v√≤ng l·∫∑p ki·ªÉm tra t·ª´ng xe binh anh
    // L·∫•y th√¥ng tin status. Ch·ªù ƒë·∫øn khi window.statuses["vec_xxx"] c√≥ gi√° tr·ªã
    // b∆∞·ªõc 1 + b∆∞·ªõc 2: t·∫°o instance n·∫øu ch∆∞a c√≥
    await driver.executeScript(`
      if (!window.onlineViewData) {
          window.onlineViewData = new OnlineViewData();
          console.log("ƒê√£ t·∫°o OnlineViewData m·ªõi");
      }
    `);

    // b∆∞·ªõc 3: g·ªçi h√†m l·∫•y danh s√°ch xe
    await driver.executeScript(`window.onlineViewData.getListVehicle();`);

    // L·∫•y danh s√°ch xe (callback -> Promise ƒë·ªÉ tr·∫£ v·ªÅ Node)
    let listVehicle = await driver.executeAsyncScript(function (callback) {
      window.onlineViewData.getListVehicleProto(function (listVehicle) {
        callback(listVehicle); // tr·∫£ k·∫øt qu·∫£ v·ªÅ Node.js
      });
    });

    for (let [plate, carId] of Object.entries(binhanh)) {
      try {
        // T√¨m xe c√≥ id = 485798
        let value = listVehicle.find((v) => v.id === Number(carId));
        // console.log("Xe t√¨m ƒë∆∞·ª£c:", value);
        if (!value) {
          console.log(`‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu cho xe ${plate}`);
          continue;
        }

        let continuous = value.bgt.t_continus * 60;
        let daily = value.bgt.t_day * 60;
        let weekly = value.bgt.minute_week * 60;
        // continuous = 12600; // Gi·∫£ s·ª≠ gi√° tr·ªã n√†y l√† 12600 gi√¢y (3.5 gi·ªù)
        // daily = 28800; // Gi·∫£ s·ª≠ gi√° tr·ªã n√†y l√† 28800 gi√¢y (8 gi·ªù)
        // weekly = 165600; // Gi·∫£ s·ª≠ gi√° tr·ªã n√†y l√† 165600 gi√¢y (46 gi·ªù)

        console.log(`\nüìå Xe ${plate}:`);
        console.log(" - L√°i li√™n t·ª•c:", formatTimeFromSeconds(continuous));
        console.log(" - L√°i trong ng√†y:", formatTimeFromSeconds(daily));
        console.log(" - L√°i trong tu·∫ßn:", formatTimeFromSeconds(weekly));

        //  Ki·ªÉm tra qu√° gi·ªõi h·∫°n ontinuous > 14400 || daily > 36000 || weekly > 172800
        // C·∫£nh b√°o n·∫øu l√°i li√™n t·ª•c qu√° 4 gi·ªù
        if (continuous > 14400) {
          const records = await loadWarningRecords();
          const arr = records[plate];
          if (Array.isArray(arr)) {
            const existing = arr.find(
              (kieu_vi_pham) => kieu_vi_pham.type === "over_4h"
            );
            if (
              existing !== undefined &&
              Date.now() - existing.time <= 14400 * 1000
            ) {
              console.log("ƒê√£ c·∫£nh b√°o type 'over_4h' tr∆∞·ªõc ƒë√≥ t·∫°i:");
            } else {
              console.log("Ch∆∞a t·ª´ng c·∫£nh b√°o 'over_4h' cho xe n√†y.");
              await saveWarningRecord(plate, "over_4h");
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Xe ${plate} ƒë√£ l√°i li√™n t·ª•c qu√° 4 gi·ªù!`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin " th√¥ng tin xe ${plate}"`
              );
              console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'over_4h' cho xe:", plate);
            }
          } else {
            console.log("Ch∆∞a c√≥ record n√†o cho bi·ªÉn s·ªë n√†y.");
            await saveWarningRecord(plate, "over_4h");
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Xe ${plate} ƒë√£ l√°i li√™n t·ª•c qu√° 4 gi·ªù!`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin " th√¥ng tin xe ${plate}"`
            );
            console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'over_4h' cho xe:", plate);
          }
        }
        // C·∫£nh b√°o n·∫øu l√°i trong ng√†y qu√° 10 gi·ªù
        if (daily > 36000) {
          // 10h = 36000 gi√¢y
          const records = await loadWarningRecords();
          const arr = records[plate];

          if (Array.isArray(arr)) {
            const existing = arr.find(
              (kieu_vi_pham) => kieu_vi_pham.type === "over_10h"
            );

            if (
              existing !== undefined &&
              new Date(existing.time).toDateString() ===
                new Date().toDateString()
            ) {
              // ƒê√£ c·∫£nh b√°o trong c√πng 1 ng√†y
              console.log(
                "ƒê√£ c·∫£nh b√°o type 'over_10h' cho xe n√†y h√¥m nay t·∫°i:",
                new Date(existing.time).toLocaleString()
              );
            } else {
              // Ch∆∞a c√≥ ho·∫∑c kh√°c ng√†y -> c·∫£nh b√°o m·ªõi
              console.log("Ch∆∞a t·ª´ng c·∫£nh b√°o 'over_10h' cho xe n√†y h√¥m nay.");
              await saveWarningRecord(plate, "over_10h");
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Xe ${plate} ƒë√£ l√°i trong ng√†y qu√° 10 gi·ªù!`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
              );
              console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'over_10h' cho xe:", plate);
            }
          } else {
            // Ch∆∞a c√≥ record n√†o
            console.log("Ch∆∞a c√≥ record n√†o cho bi·ªÉn s·ªë n√†y.");
            await saveWarningRecord(plate, "over_10h");
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Xe ${plate} ƒë√£ l√°i trong ng√†y qu√° 10 gi·ªù!`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `c√≥ th·ªÉ xem th√¥ng tin th·ªùi l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
            );
            console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'over_10h' cho xe:", plate);
          }
        }
        // C·∫£nh b√°o n·∫øu l√°i trong tu·∫ßn qu√° 48 gi·ªù
        if (weekly > 172800) {
          // 172800 gi√¢y = 48h
          const records = await loadWarningRecords();
          const arr = records[plate];
          const thisWeek = getWeekNumber(new Date());
          const thisYear = new Date().getFullYear();

          if (Array.isArray(arr)) {
            const existing = arr.find((r) => r.type === "over_48h_week");
            if (
              existing !== undefined &&
              getWeekNumber(new Date(existing.time)) === thisWeek &&
              new Date(existing.time).getFullYear() === thisYear
            ) {
              console.log(
                `ƒê√£ c·∫£nh b√°o 'over_48h_week' trong tu·∫ßn ${thisWeek} r·ªìi.`
              );
            } else {
              console.log(
                `Ch∆∞a c·∫£nh b√°o 'over_48h_week' trong tu·∫ßn ${thisWeek}.`
              );
              await saveWarningRecord(plate, "over_48h_week");
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Xe ${plate} ƒë√£ l√°i xe qu√° 48 gi·ªù trong tu·∫ßn!`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
              );
              console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'over_48h_week' cho xe:", plate);
            }
          } else {
            console.log("Ch∆∞a c√≥ record n√†o cho bi·ªÉn s·ªë n√†y.");
            await saveWarningRecord(plate, "over_48h_week");
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Xe ${plate} ƒë√£ l√°i xe qu√° 48 gi·ªù trong tu·∫ßn!`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
            );
            console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'over_48h_week' cho xe:", plate);
          }
        }
        // 46h = 165600 gi√¢y, 48h = 172800 gi√¢y
        if (weekly >= 165600 && weekly < 172800) {
          const records = await loadWarningRecords();
          const arr = records[plate];
          const thisWeek = getWeekNumber(new Date());
          const thisYear = new Date().getFullYear();

          if (Array.isArray(arr)) {
            const existing = arr.find((r) => r.type === "near_48h_week");
            if (
              existing !== undefined &&
              getWeekNumber(new Date(existing.time)) === thisWeek &&
              new Date(existing.time).getFullYear() === thisYear
            ) {
              console.log(
                `ƒê√£ c·∫£nh b√°o 'near_48h_week' trong tu·∫ßn ${thisWeek} r·ªìi.`
              );
            } else {
              console.log(
                `Ch∆∞a c·∫£nh b√°o 'near_48h_week' trong tu·∫ßn ${thisWeek}.`
              );
              await saveWarningRecord(plate, "near_48h_week");
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Xe ${plate} ƒë√£ l√°i xe g·∫ßn 48 gi·ªù (‚â•46h v√† <48h) trong tu·∫ßn!`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
              );
              console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'near_48h_week' cho xe:", plate);
            }
          } else {
            console.log("Ch∆∞a c√≥ record n√†o cho bi·ªÉn s·ªë n√†y.");
            await saveWarningRecord(plate, "near_48h_week");
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Xe ${plate} ƒë√£ l√°i xe g·∫ßn 48 gi·ªù (‚â•46h v√† <48h) trong tu·∫ßn!`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
            );
            console.log("ƒê√£ g·ª≠i c·∫£nh b√°o 'near_48h_week' cho xe:", plate);
          }
        }

        // G·∫ßn 4h li√™n t·ª•c (>= 3h = 10800)
        if (continuous >= 12600 && continuous < 14400) {
          const records = await loadWarningRecords();
          const arr = records[plate];
          if (Array.isArray(arr)) {
            const existing = arr.find((r) => r.type === "near_4h");
            if (
              existing !== undefined &&
              Date.now() - existing.time <= 14400 * 1000
            ) {
              console.log(
                "ƒê√£ c·∫£nh b√°o 'near_4h' cho xe n√†y trong v√≤ng 4 ti·∫øng."
              );
            } else {
              console.log("Ch∆∞a c·∫£nh b√°o 'near_4h' trong v√≤ng 4 ti·∫øng.");
              await saveWarningRecord(plate, "near_4h");
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Xe ${plate} ƒë√£ l√°i xe 3 ti·∫øng g·∫ßn 4h li√™n t·ª•c!`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
              );
            }
          } else {
            await saveWarningRecord(plate, "near_4h");
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Xe ${plate} ƒë√£ l√°i xe 3 ti·∫øng g·∫ßn 4h li√™n t·ª•c!`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
            );
          }
        }
        // G·∫ßn 10h trong ng√†y (>= 8h = 28800s, < 10h = 36000s)
        if (daily >= 28800 && daily < 36000) {
          const records = await loadWarningRecords();
          const arr = records[plate];
          if (Array.isArray(arr)) {
            const existing = arr.find((r) => r.type === "near_10h");
            if (
              existing &&
              new Date(existing.time).toDateString() ===
                new Date().toDateString()
            ) {
              console.log("ƒê√£ c·∫£nh b√°o 'near_10h' cho xe n√†y h√¥m nay.");
            } else {
              console.log("Ch∆∞a c·∫£nh b√°o 'near_10h' h√¥m nay ‚Üí g·ª≠i c·∫£nh b√°o.");
              await saveWarningRecord(plate, "near_10h");
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Xe ${plate} ƒë√£ l√°i xe 8 ti·∫øng g·∫ßn 10h trong ng√†y!`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
              );
              await sendTextToUser(
                api,
                zalo_id[plate],
                `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
              );
            }
          } else {
            await saveWarningRecord(plate, "near_10h");
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Xe ${plate} ƒë√£ l√°i xe 8 ti·∫øng  g·∫ßn 10h trong ng√†y!`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`
            );
            await sendTextToUser(
              api,
              zalo_id[plate],
              `c√≥ th·ªÉ xem th√¥ng tin th·ªùi gian l√°i xe b·∫±ng c√°ch nh·∫Øn tin "th√¥ng tin xe ${plate}"`
            );
          }
        }
      } catch (err) {
        // console.error(`L·ªói khi ki·ªÉm tra xe ${plate}:`, err.message);
      }
    }
  } catch (err) {
    console.error("‚ùå L·ªói:", err);
  } finally {
    // ‚úÖ lu√¥n ƒë√≥ng Firefox khi xong
    await driver.quit();
  }
}

async function startSimpleAutoReply() {
  const zalo = new Zalo();
  const api = await zalo.loginQR();
  // Regex linh ho·∫°t h∆°n ƒë·ªÉ nh·∫≠n di·ªán bi·ªÉn s·ªë xe
  const regex = /\bth√¥ng\s*tin\s*xe\s+([0-9A-Za-z]+)\b/i;
  // check time tr∆∞·ªõc 1 l·∫ßn
  await check_time_vietmap(api);
  // check time tr∆∞·ªõc 1 l·∫ßn
  await check_time_binhanh(api);
  // Sau ƒë√≥ c·ª© 10 ph√∫t ch·∫°y l·∫°i
  setInterval(async () => {
    await check_time_vietmap(api);
  }, 10 * 60 * 1000);
  // Sau ƒë√≥ c·ª© 10 ph√∫t ch·∫°y l·∫°i
  setInterval(async () => {
    await check_time_binhanh(api);
  }, 10 * 60 * 1000);

  api.listener.on("message", async (message) => {
    if (
      message.type === ThreadType.User &&
      !message.isSelf &&
      typeof message.data.content === "string" && // Ki·ªÉm tra content l√† chu·ªói
      message.data.content.includes("th√¥ng tin xe")
    ) {
      const current_car = message.data.content.match(regex);
      if (current_car && current_car[1]) {
        const originalPlate = current_car[1];
        const plate = originalPlate.toUpperCase(); // Chu·∫©n h√≥a v·ªÅ ch·ªØ hoa

        console.log(
          `üìã Bi·ªÉn s·ªë xe t·ª´ tin nh·∫Øn: "${originalPlate}" ‚Üí Chu·∫©n h√≥a: "${plate}"`
        );

        // Ki·ªÉm tra bi·ªÉn s·ªë xe c√≥ h·ª£p l·ªá kh√¥ng (√≠t nh·∫•t 5 k√Ω t·ª±)
        if (plate.length < 5) {
          console.log(`‚ö†Ô∏è Bi·ªÉn s·ªë xe qu√° ng·∫Øn: "${plate}"`);
          await api.sendMessage(
            {
              msg: `Bi·ªÉn s·ªë xe "${plate}" kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.`,
            },
            message.threadId,
            message.type
          );
          return;
        }

        // Ki·ªÉm tra bi·ªÉn s·ªë xe thu·ªôc binhanh hay vietmap
        if (binhanh.hasOwnProperty(plate)) {
          console.log("ƒê√£ t√¨m th·∫•y bi·ªÉn s·ªë xe trong binhanh:", plate);
          console.log("V·ªõi ID bi·ªÉn s·ªë xe:", binhanh[plate]);
          await run_binhanh(plate);
          await api
            .sendMessage(
              {
                msg: `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`,
                attachments: [path.resolve("./Bao_cao_xe.png")],
              },
              message.threadId,
              message.type
            )
            .then(console.log)
            .catch(console.error);
        } else if (vietmap.hasOwnProperty(plate)) {
          console.log("ƒê√£ t√¨m th·∫•y bi·ªÉn s·ªë xe trong vietmap:", plate);
          console.log("V·ªõi ID bi·ªÉn s·ªë xe:", vietmap[plate]);
          await run_vietmap(plate);
          await api
            .sendMessage(
              {
                msg: `Th·ªùi gian ki·ªÉm tra: ${new Date().toLocaleString()}`,
                attachments: [path.resolve("./Bao_cao_xe.png")],
              },
              message.threadId,
              message.type
            )
            .then(console.log)
            .catch(console.error);
        } else {
          console.log(`‚ùå Kh√¥ng t√¨m th·∫•y bi·ªÉn s·ªë xe: "${plate}"`);
          console.log(`üìã C√°c bi·ªÉn s·ªë c√≥ s·∫µn trong h·ªá th·ªëng:`);
          console.log(`   ‚Ä¢ Binhanh: ${Object.keys(binhanh).join(", ")}`);
          console.log(`   ‚Ä¢ Vietmap: ${Object.keys(vietmap).join(", ")}`);

          await api.sendMessage(
            {
              msg: `Kh√¥ng t√¨m th·∫•y th√¥ng tin cho bi·ªÉn s·ªë xe ${plate}. Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c li√™n h·ªá admin.`,
            },
            message.threadId,
            message.type
          );
        }
      }
    } else if (message.type === ThreadType.User) {
      const {
        threadId,
        data: { content },
      } = message;
      console.log("üì© C√≥ tin nh·∫Øn c√° nh√¢n m·ªõi:");
      console.log("  ‚Ä¢ Th·ªùi gian:", new Date().toLocaleTimeString());
      console.log("  ‚Ä¢ N·ªôi dung:", message.data.content);
      console.log(
        "  ‚Ä¢ T·ª´:",
        message.sender ? message.sender.name : message.threadId
      );

      setTimeout(() => {
        api.sendMessage(
          {
            msg: `Hi·ªán ch∆∞∆°ng tr√¨nh ch·ªâ h·ªó tr·ª£ nh·∫Øc khi ch·∫°y qu√° gi·ªù ho·∫∑c s·∫Øp qu√°. V√† H·ªó tr·ª£ ki·ªÉm tra nhanh th√¥ng tin xe vd ki·ªÉm tra xe 31538 th√¨ nh·∫Øn tin v·ªõi n·ªôi dung : " th√¥ng tin xe 29ld31538"`,
          },
          threadId,
          message.type
        );
      }, 2 * 60 * 1000); // ƒë·ª£i 2 ph√∫t r·ªìi g·ª≠i
      console.log("üì© ƒë√£ ph·∫£n h·ªìi tin nh·∫Øn");
    }
  });

  api.listener.start();
  console.log(
    "Bot ƒë√£ l·∫Øng nghe tin nh·∫Øn c√° nh√¢n. T·ª± tr·∫£ l·ªùi sau 5 ph√∫t n·∫øu kh√¥ng c√≥ h√†nh ƒë·ªông ti·∫øp."
  );
}

startSimpleAutoReply().catch(console.error);
